# -*- coding: utf-8 -*-
"""DesafioBemol.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1geUkYrMrZwNfnba81iFS3ZMVo0jCLpIF

# **0. IMPORTANDO BIBLIOTECAS**
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

"""# **0.1 FUNÇÕES IMPORTANTES**

# Gráfico em pizza
"""

def plotar_grafico_pizza(df,ocorr,lab,x=2,explode=[],title='TITULO'):
  fig = plt.figure(figsize=(10,7))
  ax1 = fig.add_subplot(111)
  ocorrencia = []
  labels = []
  for i in df.index: 
      if i > x:
        break
      else:
        ocorrencia.append(df[ocorr][i])
        labels.append(df[lab][i])
        

  if len(explode) == 0:
    for i in df.index:
      if i > x:
        break
      else:
        explode.append(i*0.05)
          

  cores = ['lightblue', 'green', 'yellow', 'red']
  total = sum(ocorrencia)
  plt.pie(ocorrencia, explode=explode, labels=labels, colors=cores, autopct=lambda p: f'{(p * total / 100):.2f}%', shadow=True, startangle=90)
  plt.axis('equal') 
  # Cria um título para o gráfico
  ax1.set_title(title, fontsize=15) 
  ax1.legend(bbox_to_anchor=(1,0), loc="lower right", bbox_transform=fig.transFigure) #legenda em posicao especifica
  
  plt.show()

"""# Gráfico de Dispersão"""

def grafico_dispersao(df1,df2,ocorr,lab,title):
   #fig, axes = plt.subplots(nrows=1, ncols=1, figsize=(13, 5)) define a quantidade de gráficos em suplot
   fig = plt.figure(figsize=(15,15))
   axes = fig.add_subplot(111)
   x1 = []
   y1 = []
   x2 = []
   y2 = []
   explode = []
   for i in df_deb.index:
     x1.append(df1[ocorr][i])
     y1.append(df1[lab][i])
   for i in df_cred.index:
     x2.append(df2[ocorr][i])
     y2.append(df2[lab][i])
           
   # cria rótulo no eixo x
   axes.set_xlabel( 'Data da Movimentação', color='b')
   # cria rótulo no eixo y
   axes.set_ylabel( 'Valor Movimentado (BRL)', color='b') 
   # Cria um título para o gráfico
   axes.set_title(title) 

   #PRIMEIRO GRÁFICO
   axes.scatter(x1,y1,color='green',s=5,edgecolor='none')
   #deixa os eixos quadrados
   axes.set_aspect(1./axes.get_data_ratio()) 

   #SEGUNDO GRÁFICO
   axes.scatter(x2,y2,color='red',s=5,edgecolor='none')
   #deixa os eixos quadrados
   axes.set_aspect(1./axes.get_data_ratio())
 

   plt.show()

"""# Gráfico em Barras"""

def grafico_barras(df, ocorr, lab, lab2):
  x = []
  y = []
  z = []
  w = []
  a = []
  for i in df.index: 
      if i > 5:
        break
      else:
        #cria os dados
        x.append(df[ocorr][i])
        y.append(df[lab][i])
        z.append(df[lab2][i])
        w.append(df[lab][i] + df[lab][i])
        a.append(df[lab][i]/(df[lab][i] + df[lab2][i]) )

      
  #cria a figura e o eixo
  fig = plt.figure(figsize=(10,7))
  ax1 = fig.add_subplot(111)

  def plot_bar(x, vals, width= 0.8):
    n = len(vals)
    _x = np.arange(len(x))
    for i in range(n):
        ax1.bar(_x - width/2. + i / float(n) * width, vals[i], width=width/float(n), align="edge")
    plt.xticks(_x, x)

  ax1.set_ylabel( 'Valor Movimentado (BRL)', color='b') #cria o rótula do primeiro eixo
  plot_bar(x, [z,y])
  ax2 = ax1.twinx() # cria o segundo eixo
  plt.legend()
  
  ax2.set_ylabel('média', color='b') #cria o rótula do segundo eixo
  ax2.plot(a, color='b')
  ax2.tick_params(axis='y', labelcolor='b')


  plt.show()

"""# Gráfico de Linhas"""

def grafico_linhas(df, titulo='TITULO',xlabel="X",ylabel="Y"): 
  fig = plt.figure(figsize=(10,7))
  ax1 = fig.add_subplot(111)

  todasLinhas = df.values.tolist()
  x = df.columns.values
  x = x[1:6]
  for linha in todasLinhas:
    plt.plot(x,linha[1:6], label= linha[0] )
  #plt.ylim(0, 100000)  define o intervalo do eixo y
  #plt.yticks(np.linspace(0, 10, 500, endpoint=True)) # Define as marcas em y
  plt.title(titulo,fontsize=15)
  plt.xlabel(xlabel,fontsize=13)
  plt.ylabel(ylabel,fontsize=13)
  plt.legend()
  plt.show()

"""# **1. MANIPULAÇÃO DE DADOS**
Desafio Bemol Data Analyst

"""

df_clientes = pd.read_csv('Dados_vale_credito_tabela1.csv', sep=',', skiprows=0, encoding='utf-8')
df_transacoes = pd.read_csv('Dados_vale_credito_tabela2.csv', sep=',', skiprows=0, encoding='utf-8')

df_clientes.sort_values(['CLIENTE'], ascending =[True] )

df_transacoes.sort_values(['CLIENTE'] ,ascending = [True])

"""# **1.1 DISTRIBUIÇÃO DÉBITOS**"""

df_deb = df_transacoes[(df_transacoes['DEBITO_OU_CREDITO']) == 'DEBITO'].copy()
df_cred = df_transacoes[(df_transacoes['DEBITO_OU_CREDITO']) == 'CREDITO'].copy()
grafico_dispersao(df_deb,df_cred,"DATA_DA_MOVIMENTACAO",'VALOR_MOVIMENTADO',"Débitos e Créditos no Tempo")

"""# **2. TRATAMENTO DE DADOS**

# **2.1 VERIFICAR TIPOS DE COLUNAS**
"""

df_clientes.dtypes

df_transacoes.dtypes

"""# **2.2 ALTERANDO TIPOS DE COLUNAS**"""

df_transacoes[['FATURA','LOJA']] = df_transacoes[['FATURA','LOJA']].fillna(0).astype(int)
df_transacoes[['DATA_DA_MOVIMENTACAO','DATA_CRIACAO']] = df_transacoes[['DATA_DA_MOVIMENTACAO','DATA_CRIACAO']].astype('datetime64')
df_transacoes

df_transacoesL = df_transacoes.copy()
df_transacoesL['TIPO_TRANSACAO_VC'] = df_transacoesL['TIPO_TRANSACAO_VC'].str.replace('_',' ')
df_transacoesL

"""# **3.0 TIPOS DE TRANSACOES MAIS RECORRENTES**



"""

df_tiposTranscoes = df_transacoes.groupby(['TIPO_TRANSACAO_VC']).agg({'VALOR_MOVIMENTADO':'sum','CLIENTE':'count'})
df_tiposTranscoes  = df_tiposTranscoes.rename(columns={'CLIENTE':'N_OCORRENCIA'})
df_tiposTranscoes['MEDIA_POR_TIPO_COMPRA'] = df_tiposTranscoes['VALOR_MOVIMENTADO']/df_tiposTranscoes['N_OCORRENCIA']
df_tiposTranscoes['MEDIA_POR_TIPO_COMPRA'] =df_tiposTranscoes['MEDIA_POR_TIPO_COMPRA'].round(2)
df_tiposTranscoes['PORCENTAGEM'] = abs(df_tiposTranscoes['N_OCORRENCIA']/df_tiposTranscoes['N_OCORRENCIA'].sum())*100
df_tiposTranscoes['PORCENTAGEM']  = df_tiposTranscoes['PORCENTAGEM'].round(4)
df_tiposTranscoes  = df_tiposTranscoes.sort_values(['PORCENTAGEM'] ,ascending = [False]).reset_index(drop = False)
df_tiposTranscoes['TIPO_TRANSACAO_VC'] = df_tiposTranscoes['TIPO_TRANSACAO_VC'].str.replace('_',' ')
df_tiposTranscoes

"""# **4.1 DEBITOS MAIS FREQUENTES**

"""

df_saidasFrequentes = df_tiposTranscoes[(df_tiposTranscoes['VALOR_MOVIMENTADO']<0)].copy()
df_saidasFrequentes = df_saidasFrequentes.drop(['PORCENTAGEM'], axis = 'columns')
df_saidasFrequentes['PORCENTAGEM'] = (df_saidasFrequentes['N_OCORRENCIA']/df_saidasFrequentes['N_OCORRENCIA'].sum())*100
df_saidasFrequentes = df_saidasFrequentes.sort_values(['PORCENTAGEM'] ,ascending = [False]).reset_index(drop = False)
df_saidasFrequentes['PORCENTAGEM']  = df_saidasFrequentes['PORCENTAGEM'].round(4)
df_saidasFrequentes=df_saidasFrequentes.drop(['index'], axis = 'columns')
df_saidasFrequentes['TIPO_TRANSACAO_VC'] = df_saidasFrequentes['TIPO_TRANSACAO_VC'].str.replace('_',' ')
df_saidasFrequentes

print(f"Débito Mais Frequente: {df_saidasFrequentes.iloc[0]['TIPO_TRANSACAO_VC']}  Frequencia: {df_saidasFrequentes.iloc[0]['PORCENTAGEM']:.2f}%")

df_saidasFrequentes['TIPO_TRANSACAO_VC'] = df_saidasFrequentes['TIPO_TRANSACAO_VC'].str.replace('_',' ')
plotar_grafico_pizza(df_saidasFrequentes,"PORCENTAGEM","TIPO_TRANSACAO_VC",explode=[0.07,0.07,0.07],title="DEBITOS MAIS FREQUENTES")

"""# **4.2 CRÉDITOS MAIS FREQUENTES**"""

df_entradasFrequentes = df_tiposTranscoes[(df_tiposTranscoes['VALOR_MOVIMENTADO']>0)].copy()
df_entradasFrequentes = df_entradasFrequentes.drop(['PORCENTAGEM'], axis = 'columns')
df_entradasFrequentes['PORCENTAGEM'] = (df_entradasFrequentes['N_OCORRENCIA']/df_entradasFrequentes['N_OCORRENCIA'].sum())*100
df_entradasFrequentes = df_entradasFrequentes.sort_values(['PORCENTAGEM'] ,ascending = [False]).reset_index(drop = False)
df_entradasFrequentes['PORCENTAGEM']  = df_entradasFrequentes['PORCENTAGEM'].round(4)
df_entradasFrequentes=df_entradasFrequentes.drop(['index'], axis = 'columns')
df_entradasFrequentes['TIPO_TRANSACAO_VC'] = df_entradasFrequentes['TIPO_TRANSACAO_VC'].str.replace('_',' ')

df_entradasFrequentes

print(f"Crédito Mais Frequente: {df_entradasFrequentes.iloc[0]['TIPO_TRANSACAO_VC']}  Frequencia: {df_entradasFrequentes.iloc[0]['PORCENTAGEM']:.2f}%")

df_entradasFrequentes['TIPO_TRANSACAO_VC'] = df_entradasFrequentes['TIPO_TRANSACAO_VC'].str.replace('_',' ')
plotar_grafico_pizza(df_entradasFrequentes,"PORCENTAGEM","TIPO_TRANSACAO_VC",2,explode=[0.1,0.2,0.3], title = "CRÉDITOS MAIS FREQUENTES")

"""# **4.2 MAIORES VOLUMES DE DEBITOS**"""

df_saidasVolume = df_saidasFrequentes.drop(['PORCENTAGEM'], axis = 'columns').copy()
df_saidasVolume['PORCENTAGEM'] = (df_saidasVolume['VALOR_MOVIMENTADO']/df_saidasVolume['VALOR_MOVIMENTADO'].sum())*100
df_saidasVolume = df_saidasVolume.sort_values(['PORCENTAGEM'] ,ascending = [False]).reset_index(drop = False)
df_saidasVolume=df_saidasVolume.drop(['index'], axis = 'columns')
df_saidasVolume

print(f"Debito mais Volumoso: {df_saidasVolume.iloc[0]['TIPO_TRANSACAO_VC']}  Porcentagem do Volume Total: {df_saidasVolume.iloc[0]['PORCENTAGEM']:.2f}%")

df_saidasVolume['TIPO_TRANSACAO_VC'] = df_saidasVolume['TIPO_TRANSACAO_VC'].str.replace('_',' ')
plotar_grafico_pizza(df_saidasVolume,"PORCENTAGEM","TIPO_TRANSACAO_VC", title="MAIORES VOLUMES DE DEBITOS")

"""# **4.3 MAIORES VOLUMES DE CREDITOS**"""

df_entradaVolume = df_entradasFrequentes.drop(['PORCENTAGEM'], axis = 'columns').copy()
df_entradaVolume['PORCENTAGEM'] = (df_entradaVolume['VALOR_MOVIMENTADO']/df_entradaVolume['VALOR_MOVIMENTADO'].sum())*100
df_entradaVolume = df_entradaVolume.sort_values(['PORCENTAGEM'] ,ascending = [False]).reset_index(drop = False)
df_entradaVolume=df_entradaVolume.drop(['index'], axis = 'columns')
df_entradaVolume['TIPO_TRANSACAO_VC'] = df_entradaVolume['TIPO_TRANSACAO_VC'].str.replace('_',' ')

df_entradaVolume

print(f"Crédito mais Volumoso: {df_entradaVolume.iloc[0]['TIPO_TRANSACAO_VC']}  Porcentagem do Volume Total: {df_entradaVolume.iloc[0]['PORCENTAGEM']:.2f}%")

plotar_grafico_pizza(df_entradaVolume,"PORCENTAGEM","TIPO_TRANSACAO_VC",explode=[0.1,0.1,0.2])

"""# **5.0 VALOR MÉDIO MOVIMENTADO POR PESSOA**"""

df_agrupPessoa  = df_transacoes.copy()
df_agrupPessoa['VALOR_MOVIMENTADO'] = abs(df_agrupPessoa['VALOR_MOVIMENTADO'])
df_agrupPessoa = df_agrupPessoa.groupby(['CLIENTE']).agg({'VALOR_MOVIMENTADO':'sum','DEBITO_OU_CREDITO':'count'})
df_agrupPessoa = df_agrupPessoa.rename(columns={'DEBITO_OU_CREDITO':'N_OCORRENCIA'}).reset_index(drop = False)
print(f"Valor Médio Movimentado por pessoa: {df_agrupPessoa['VALOR_MOVIMENTADO'].sum()/df_agrupPessoa['CLIENTE'].count():.2f} BRL")
# Considerou-se que todas as operacoes realizadas por uma mesma pessoa deveriam ser somadas, e as operacoes de saída deveriam ser consideraos
#seus valores absolutos, não importando o sentido da operação.

"""# **5.1 VALOR MÉDIO MOVIMENTADO POR TRANSACAO**"""

print(f"Valor Médio Movimentado por transação: {df_agrupPessoa['VALOR_MOVIMENTADO'].sum()/df_agrupPessoa['N_OCORRENCIA'].sum():.2f} BRL")

"""# **5.2 VALOR MÉDIO DE CRÉDITOS E DÉBITOS MOVIMENTADOS POR PESSOA E POR TRANSACAO**"""

df_agrupPessoaEntradas = df_transacoes[(df_transacoes['VALOR_MOVIMENTADO']>0)].copy()
df_agrupPessoaEntradas = df_agrupPessoaEntradas.groupby(['CLIENTE']).agg({'VALOR_MOVIMENTADO':'sum','DEBITO_OU_CREDITO':'count'})
df_agrupPessoaEntradas = df_agrupPessoaEntradas.rename(columns={'DEBITO_OU_CREDITO':'N_OCORRENCIA'}).reset_index(drop = False)
print(f"Valor Médio de Crédito por pessoa: {df_agrupPessoaEntradas['VALOR_MOVIMENTADO'].sum()/df_agrupPessoaEntradas['CLIENTE'].count():.2f} BRL")
print(f"Valor Médio de Crédito por transacao: {df_agrupPessoaEntradas['VALOR_MOVIMENTADO'].sum()/df_agrupPessoaEntradas['N_OCORRENCIA'].sum():.2f} BRL")


df_agrupPessoaSaidas = df_transacoes[(df_transacoes['VALOR_MOVIMENTADO']<0)].copy()
df_agrupPessoaSaidas = df_agrupPessoaSaidas.groupby(['CLIENTE']).agg({'VALOR_MOVIMENTADO':'sum','DEBITO_OU_CREDITO':'count'})
df_agrupPessoaSaidas = df_agrupPessoaSaidas.rename(columns={'DEBITO_OU_CREDITO':'N_OCORRENCIA'}).reset_index(drop = False)
print(f"Valor Médio de Débito por pessoa: {df_agrupPessoaSaidas['VALOR_MOVIMENTADO'].sum()/df_agrupPessoaSaidas['CLIENTE'].count():.2f} BRL")
print(f"Valor Médio de Débito por transacao: {df_agrupPessoaSaidas['VALOR_MOVIMENTADO'].sum()/df_agrupPessoaSaidas['N_OCORRENCIA'].sum():.2f} BRL")

# Considerou-se que todas as operacoes realizadas por uma mesma pessoa deveriam ser somadas. Neste caso o sentido da operação importa

"""# **6.0 ID_LISTA_PRESENTES**

"""

df_presentes = df_transacoes.copy()
df_presentes = df_presentes.groupby([df_presentes['ID_LISTA_PRESENTES']]).agg({'DEBITO_OU_CREDITO':'count'}).reset_index(drop = False)
df_presentes = df_presentes.sort_values(['DEBITO_OU_CREDITO'] ,ascending = [False])
df_presentes = df_presentes.rename(columns={'DEBITO_OU_CREDITO':'N_OCORRENCIA'})
df_presentes= df_presentes[(df_presentes['N_OCORRENCIA'])>5].copy().reset_index(drop = False)
df_presentes = df_presentes.drop(['index'], axis = 'columns')
df_presentes= df_presentes[(df_presentes['ID_LISTA_PRESENTES'])!=0].copy()
df_presentes

"""# **7.0 DISTRIBUICAO DOS DADOS NO TEMPO**

"""

def definir_status(credito_ou_debito,status):
  if (credito_ou_debito == status):
    return 1
  else:
    return 0

df_debitoxCredito = df_transacoes.copy()
df_debitoxCredito['CREDITO'] = df_debitoxCredito.apply(lambda row: definir_status(row['DEBITO_OU_CREDITO'],'CREDITO'), axis = 'columns')
df_debitoxCredito['DEBITO'] = df_debitoxCredito.apply(lambda row: definir_status(row['DEBITO_OU_CREDITO'],'DEBITO'), axis = 'columns')
df_debitoxCredito = df_debitoxCredito.groupby([df_debitoxCredito['DATA_DA_MOVIMENTACAO'].dt.year]).agg({'CREDITO':'sum','DEBITO':'sum' }).reset_index(drop = False).copy()
df_debitoxCredito['PORCENTAGEM_DEBITO'] = (df_debitoxCredito['DEBITO']*100/(df_debitoxCredito['CREDITO'] + df_debitoxCredito['DEBITO'] )).round(2)
df_debitoxCredito['PORCENTAGEM_CREDITO'] = (df_debitoxCredito['CREDITO']*100/(df_debitoxCredito['CREDITO'] + df_debitoxCredito['DEBITO'] )).round(2)

df_debitoxCredito


#Ocorrencias de Creditos e Debitos ao Longo dos anos

grafico_barras(df_debitoxCredito, 'DATA_DA_MOVIMENTACAO', 'CREDITO','DEBITO')

"""# **7.1 FREQUENCIA DOS DEBITOS ANO A ANO** **"""

df_debitoV = df_transacoes[(df_transacoes['VALOR_MOVIMENTADO']<0)].copy()
df_debitoV['DATA_DA_MOVIMENTACAO'] = df_debitoV['DATA_DA_MOVIMENTACAO'].dt.year
df_debitoV['2016'] = df_debitoV.apply(lambda row: definir_status(row['DATA_DA_MOVIMENTACAO'],2016), axis = 'columns')
df_debitoV['2017'] = df_debitoV.apply(lambda row: definir_status(row['DATA_DA_MOVIMENTACAO'],2017), axis = 'columns')
df_debitoV['2018'] = df_debitoV.apply(lambda row: definir_status(row['DATA_DA_MOVIMENTACAO'],2018), axis = 'columns')
df_debitoV['2019'] = df_debitoV.apply(lambda row: definir_status(row['DATA_DA_MOVIMENTACAO'],2019), axis = 'columns')
df_debitoV['2020'] = df_debitoV.apply(lambda row: definir_status(row['DATA_DA_MOVIMENTACAO'],2020), axis = 'columns')
df_tipoDebito = df_debitoV.copy()
df_amostra = df_debitoV.copy()

df_debitoV = df_debitoV.groupby([df_debitoV['TIPO_TRANSACAO_VC']]).agg({'2016':'sum','2017':'sum','2018':'sum','2019':'sum','2020':'sum'})
df_debitoV['TOTAL'] = df_debitoV['2020'] + df_debitoV['2019'] +df_debitoV['2018'] + df_debitoV['2017'] + df_debitoV['2016']
df_debitoV = df_debitoV.sort_values(['TOTAL'] ,ascending = [False]).reset_index(drop = False).copy()
df_debitoV['TIPO_TRANSACAO_VC'] = df_debitoV['TIPO_TRANSACAO_VC'].str.replace('_',' ')
df_debitoV
#  TODOS OS TIPOS DE DEBITOS ANO A ANO - analisados pela frequencia do acontecimento

grafico_linhas(df_debitoV,"FREQUENCIA DOS DEBITOS ANO A ANO","DATA","DÉBITO")

"""# **7.2 TOTAL DOS DEBITOS ANO A ANO**"""

def retornar_movimentacao(ano, movimentacao):
  if (ano == 1):
    return abs(movimentacao)
  else:
    return 0

df_tipoDebito['2016'] = df_tipoDebito.apply(lambda row: retornar_movimentacao(row['2016'],row['VALOR_MOVIMENTADO']), axis = 'columns')
df_tipoDebito['2017'] = df_tipoDebito.apply(lambda row: retornar_movimentacao(row['2017'],row['VALOR_MOVIMENTADO']), axis = 'columns')
df_tipoDebito['2018'] = df_tipoDebito.apply(lambda row: retornar_movimentacao(row['2018'],row['VALOR_MOVIMENTADO']), axis = 'columns')
df_tipoDebito['2019'] = df_tipoDebito.apply(lambda row: retornar_movimentacao(row['2019'],row['VALOR_MOVIMENTADO']), axis = 'columns')
df_tipoDebito['2020'] = df_tipoDebito.apply(lambda row: retornar_movimentacao(row['2020'],row['VALOR_MOVIMENTADO']), axis = 'columns')
df_amostra3 = df_tipoDebito.copy()
df_tipoDebito = df_tipoDebito.groupby([df_tipoDebito['TIPO_TRANSACAO_VC']]).agg({'2016':'sum','2017':'sum','2018':'sum','2019':'sum','2020':'sum'})
df_tipoDebito['TOTAL'] = df_tipoDebito['2020'] + df_tipoDebito['2019'] +df_tipoDebito['2018'] + df_tipoDebito['2017'] + df_tipoDebito['2016']

df_tipoDebito = df_tipoDebito.sort_values(['TOTAL'] ,ascending = [False]).reset_index(drop = False).copy()
df_tipoDebito['TIPO_TRANSACAO_VC'] = df_tipoDebito['TIPO_TRANSACAO_VC'].str.replace('_',' ')
df_tipoDebito

grafico_linhas(df_tipoDebito,"TOTAL DE DEBITOS ANO A ANO","DATA","DÉBITO")

"""# **8.0 AMOSTRA TABELA 2 - AVALIAÇÃO DO NÍVEL DO CLIENTE **

Frenquencia de Débitos
"""

df_amostra2 = pd.merge(df_amostra, df_clientes, on =['CLIENTE'], how = 'left' )
df_amostra2['DESCRICAO_NIVEL'] = df_amostra2['DESCRICAO_NIVEL'].fillna('vazio')
df_amostra2 = df_amostra2[(df_amostra2['DESCRICAO_NIVEL'])!='vazio'].copy()
df_amostra2.sort_values(['CLIENTE'] ,ascending = [False])
df_amostra2 = df_amostra2.groupby([df_amostra2['DESCRICAO_NIVEL']]).agg({'2016':'sum','2017':'sum','2018':'sum','2019':'sum','2020':'sum'}).reset_index(drop = False)
df_amostra2['TOTAL'] = df_amostra2['2020'] + df_amostra2['2019'] +df_amostra2['2018'] + df_amostra2['2017'] + df_amostra2['2016']
df_amostra2 = df_amostra2.sort_values(['TOTAL'], ascending =[False] )
df_amostra2 = df_amostra2.reset_index(drop = False)
df_amostra2 = df_amostra2.drop(['index'], axis = 'columns')
df_amostra2

grafico_linhas(df_amostra2,"FREQUENCIA DÉBITOS POR NÍVEL DO CLIENTE","DATA","DÉBITO (BRL)")

df_amostra4 = pd.merge(df_amostra3, df_clientes, on =['CLIENTE'], how = 'left' )
df_amostra4['DESCRICAO_NIVEL'] = df_amostra4['DESCRICAO_NIVEL'].fillna('vazio')
df_amostra4 = df_amostra4[(df_amostra4['DESCRICAO_NIVEL'])!='vazio'].copy()
df_amostra4.sort_values(['CLIENTE'] ,ascending = [False])
df_amostra4 = df_amostra4.groupby([df_amostra4['DESCRICAO_NIVEL']]).agg({'2016':'sum','2017':'sum','2018':'sum','2019':'sum','2020':'sum'}).reset_index(drop = False)
df_amostra4['TOTAL'] = df_amostra4['2020'] + df_amostra4['2019'] +df_amostra4['2018'] + df_amostra4['2017'] + df_amostra4['2016']
df_amostra4 = df_amostra4.sort_values(['TOTAL'], ascending =[False] )
df_amostra4 = df_amostra4.reset_index(drop = False)
df_amostra4 = df_amostra4.drop(['index'], axis = 'columns')
df_amostra4

grafico_linhas(df_amostra4,"VOLUME DÉBITOS POR NÍVEL DO CLIENTE","DATA","DÉBITO (BRL)")

"""# **9.0 TICKET MÉDIO AMOSTRA**"""

df_nivel = pd.merge(df_transacoes, df_clientes, on =['CLIENTE'], how = 'left' )
df_nivel['DESCRICAO_NIVEL'] = df_nivel['DESCRICAO_NIVEL'].fillna('vazio')
df_nivel = df_nivel[(df_nivel['DESCRICAO_NIVEL'])!='vazio'].copy()
df_nivel.sort_values(['CLIENTE'] ,ascending = [False])
df_nivel = df_nivel.drop(['DEBITO_OU_CREDITO','ID_LISTA_PRESENTES','PEDIDO_BOL','SALDO','MOEDA','FATURA','DATA_CRIACAO','LOJA','IDNIVEL','DT_MUDANCA_PEDRA'], axis = 'columns')
df_ticket = df_nivel.groupby([df_nivel['DESCRICAO_NIVEL']]).agg({'SALDO_VC':'sum','DATA_DA_MOVIMENTACAO':'count'}).reset_index(drop = False).copy()
df_ticket = df_ticket.rename(columns={'DATA_DA_MOVIMENTACAO':'N_OCORRENCIA'})
df_ticket['TICKET_MEDIO'] = (df_ticket['SALDO_VC'] / df_ticket['N_OCORRENCIA']).round(2)
df_ticket = df_ticket.sort_values(['TICKET_MEDIO'] ,ascending = [False]).reset_index(drop = False)
df_ticket=df_ticket.drop(['index'], axis = 'columns')
df_ticket

print(f"Valor Ticket Médio Total Amostra: {df_ticket['SALDO_VC'].sum()/df_ticket['N_OCORRENCIA'].sum():.2f} BRL")

df_nivel

import datetime
fig = plt.figure(figsize=(15,20))
axes = fig.add_subplot(111)



diamanteCred =[]
dataDiamanteCred = []
diamanteDeb = []
dataDiamanteDeb = []

diamanteplusCred =[]
dataDiamanteplusCred = []
diamanteplusDeb = []
dataDiamanteplusDeb = []

ouroCred =[]
dataOuroCred =[]
ouroDeb = []
dataOuroDeb = []

prataCred =[]
dataPrataCred =[]
prataDeb = []
dataPrataDeb = []

azulCred =[]
dataAzulCred = []
azulDeb =[]
dataAzulDeb = []

todasLinhas = df_nivel.values.tolist()
for linha in todasLinhas:
  if linha[4] == "DIAMANTE":
    if linha[2] > 0:
      diamanteCred.append(linha[2])
      dataDiamanteCred.append(linha[3])
    else:
      diamanteDeb.append(linha[2])
      dataDiamanteDeb.append(linha[3])
  elif linha[4] == "DIAMANTE+":
    if linha[2] > 0:
      diamanteplusCred.append(linha[2])
      dataDiamanteplusCred.append(linha[3])
    else:
      diamanteplusDeb.append(linha[2])
      dataDiamanteplusDeb.append(linha[3])
  elif linha[4] == "OURO":
    if linha[2] > 0:
      ouroCred.append(linha[2])
      dataOuroCred.append(linha[3])
    else:
      ouroDeb.append(linha[2])
      dataOuroDeb.append(linha[3])
  elif linha[4] == "PRATA":
    if linha[2] > 0:
      prataCred.append(linha[2])
      dataPrataCred.append(linha[3])
    else:
      prataDeb.append(linha[2])
      dataPrataDeb.append(linha[3])
  else:
    if linha[2] > 0:
      azulCred.append(linha[2])
      dataAzulCred.append(linha[3])
    else:
      azulDeb.append(linha[2])
      dataAzulDeb.append(linha[3])
#------------------------------------------------------------
explode = []
        
# cria rótulo no eixo x
axes.set_xlabel( 'Data da Movimentação', color='b')
# cria rótulo no eixo y
axes.set_ylabel( 'Valor Movimentado (BRL)', color='b') 
# Cria um título para o gráfico
axes.set_title('TITULO') 

#PRIMEIRO GRÁFICO
axes.scatter(dataDiamanteCred,diamanteCred,color='red',s=5,edgecolor='none')
#deixa os eixos quadrados
axes.set_aspect(1./axes.get_data_ratio()) 


#SEGUNDO GRÁFICO
axes.scatter(dataDiamanteplusCred,diamanteplusCred,color='black',s=5,edgecolor='none')
#deixa os eixos quadrados
axes.set_aspect(1./axes.get_data_ratio())


#TERCEIRO GRÁFICO
axes.scatter(dataOuroCred,ouroCred,color='yellow',s=5,edgecolor='none')
#deixa os eixos quadrados
axes.set_aspect(1./axes.get_data_ratio())


#QUARTO GRÁFICO
axes.scatter(dataAzulCred,azulCred,color='blue',s=5,edgecolor='none')
#deixa os eixos quadrados
axes.set_aspect(1./axes.get_data_ratio()) 

plt.xlim(
    xmin=datetime.datetime(2020, 2, 9, hour=13),
    xmax=datetime.datetime(2020, 4, 4, hour=13)
)
plt.ylim(ymax = 15, ymin = 0)
plt.show()